var documenterSearchIndex = {"docs":
[{"location":"assets/静态仿真/顺流逆流换热器仿真/代码/顺逆流换热器部分代码/","page":"-","title":"-","text":"function heat_exchanger!(du,u,p,t)\n\t\t#比热容\n\t\tCp_h = CoolProp.PropsSI(\"C\", \"T\", u[1], \"P\", p[3],p[4])\n\t\tCp_c = CoolProp.PropsSI(\"C\", \"T\", u[2], \"P\", p[3],p[9])\n\t\t#计算动态粘度\n\t\tμ_h = CoolProp.PropsSI(\"V\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tμ_c = CoolProp.PropsSI(\"V\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\t#计算普朗特数\n\t\tPr_h = CoolProp.PropsSI(\"Prandtl\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tPr_c = CoolProp.PropsSI(\"Prandtl\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\t#计算雷诺数\n\t\tRe_h = 4*p[1]/p[6]/μ_h/π\n\t\tRe_c = 4*p[2]/p[7]/μ_c/π\n\n\t\t#计算努塞尔数\n\t\tif Re_c > 10000\n\t\t\tNu_c = 0.023*(Re_c^0.8)*(Pr_c^0.4)\n\t\telse\n\t\t\tNu_c = 4.36\n\t\tend\n\t\tif Re_h > 10000\n\t\t\tNu_h = 0.023*(Re_h^0.8)*(Pr_h^0.3)\n\t\telse\n\t\t\tNu_h = 4.36\n\t\tend\n\n\t\t#计算传热系数\n\t\tk_h = CoolProp.PropsSI(\"L\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tk_c = CoolProp.PropsSI(\"L\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\tη_h = Nu_h*k_h/p[6]\n\t\tη_c = Nu_c*k_c/p[7]\n\t\t#计算传热系数U\n\t\tU = (1/η_h+1/η_c)^(-1)\n\t\t#计算热传导方程 [1]为热流 [2]为冷流\n\t\tdu[1] = U*π*p[6]*(u[2]-u[1])/(Cp_h*p[1])\n\t\tif Flow_type == \"parallel\"\n\t\t\tdu[2] = U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\n\t\telseif Flow_type == \"countercurrent\"\n\t\t\tdu[2] = -U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\n\t\tend\n\tend","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#Ai4EJumulink","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/#项目概述","page":"Ai4EJumulink","title":"项目概述","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"本项目基于Julia语言开发，以自动控制原理相关理论为基础，对标MATLAB进行设计。初步实现了对于以传递函数描述的线性系统的描述，建模，求解与结果的可视化，致力于提供一个交互式的图形化环境及可定制模块库，可对各种时变系统，例如通讯、控制、信号处理、影像处理和图像处理系统等进行设计、模拟、执行和测试，也可以进行基于模型的设计。","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: 14)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#操作演示","page":"Ai4EJumulink","title":"操作演示","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: 14)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#原理介绍","page":"Ai4EJumulink","title":"原理介绍","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/#单输入单输出线性系统","page":"Ai4EJumulink","title":"单输入单输出线性系统","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"对于单输入单输出的线性系统,以传递函数描述其行为,传递函数的表达式为:","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"其中ngeq m, Y(s)为系统输出, U(s)为系统输入.采用直接分解法获取状态空间,有:","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"其中A_1为状态方程矩阵, B_1为输入方程矩阵, C_1为输出方程矩阵, D_1为直接传递矩阵.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"当 m=n时：","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"当 mn时：","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: alt text) (Image: alt text) (Image: alt text)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"借助Julia语言优秀的符号处理与运算机制,我们先定义了多项式,分式等数学结构,并进一步定义它们的四则混合运算.于是就可以很轻松地定义一个传递函数.并通过它的多项式系数获取它的状态空间.并基于状态空间对线性系统进行求解.关于常系数线性常微分方程组的求解,我们使用了Julia的开源求解包:DifferentialEquationsjl进行求解.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#多输入多输出线性系统","page":"Ai4EJumulink","title":"多输入多输出线性系统","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"对于多输入多输出的线性系统,有传递矩阵描述其行为,传递矩阵的表达式为:","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"其中G_ij(s)为第i个输出与第j个输入的传递函数.根据线性微分方程的叠加性,所以,多输入多输出线性系统的每一个输出便可由它关于每一个输入的输出叠加得到.我们利用2.1中对单输入单输出线性系统的处理,就能得到多输入多输出线性系统的解.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#设计思路","page":"Ai4EJumulink","title":"设计思路","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"我们采用了与SimuLink类似的可拖拉拽的GUI进行系统的建模,这一行为本身就与控制系统方框图相呼应.于是,自然而然地,我们采用梅森公式来获取传递函数.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"梅森公式：","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"用户在GUI中通过拖拽的形式摆放,连接系统组件,我们采用邻接矩阵来储存连接信息.并规定,以矩阵的行表示连接的起点,矩阵的列表示连接的终点.因而,第i个组件与第j个组件的连接就对应于邻接矩阵的第i行第j列的元素等于1,否则等于0.此外,对于和点处的+与-,我们规定+为1, -为-1.这样,基于邻接矩阵,并利用回溯的寻路算法,我们就可以获取任意一对输入与输出间的前向通道,系统的闭合回路等用于梅森公式计算传递函数的元素,进而计算传递函数.并得到系统的传递矩阵和状态空间,然后得出线性系统的解.并进行可视化分析.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#设计实现","page":"Ai4EJumulink","title":"设计实现","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"与MATLAB不同的是,我们的项目是基于前后端分离思想的网络应用程序.\n1.使用Vue3+TypeScript+Axios进行拖拉拽网页前端的设计与构建.\n2.使用自行编写的多项式运算与分式运算库,并结合3中所述梅森公式的算法求得传递函数.\n3.利用直接分解法求得状态空间,获得系统的微分方程组.\n4.利用DifferentialEquationsjl求解线性系统的解.\n5.最后通过Oxygenjl实现Julia后端与前端网页的数据交互.\n作为网络程序当然也就具有便捷性与跨平台性.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#设计内容","page":"Ai4EJumulink","title":"设计内容","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"目前我们构建了:","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"基本的传递函数组件:以向量形式,按从左到右升幂的形式表达多项式的系数.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: 7)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"零极点形式的传递函数组件:以向量的形式表达系统的零点与极点.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: 11)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"比例环节:可以设置比例系数.\nG(s)=K\n(Image: 6)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"积分环节:可以设置积分时间常数.\nG(s)=frac1T_is\n(Image: 9)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"理想微分环节:可以设置微分时间常数.\nG(s)=T_ds\n实际微分环节:可以设置微分时间常数与比例系数.\nG(s)=frackT_ds1+T_ds\n(Image: 10)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"和点:支持最大3端的输入加减求和,可以变更每一端的符号.\n和块:与MATLAB类似,支持最大5端的输入加减求和,可以变更每一端的符号.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: 8)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"等基本系统组件.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"设计了包含三种经典系统输入(阶跃,斜坡,抛物线)的系统输入组件,以及用于可视化的示波器组件.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: 12)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"(Image: 13)","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"当然,基于我们的架构也可以添加更多组件.这也说明我们的架构是可扩展的,完备的.\n此外,后端当然也可以单独分离出来,借助Julia交互式终端实现类似于MATLAB命令行输入的交互方式.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#设计总结","page":"Ai4EJumulink","title":"设计总结","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"总的来讲,本项目立足于所学知识,结合了前端与后端的设计思想,并结合了Julia语言的优秀特性,构建了基于前端拖拽的线性系统建模与求解的网络程序.\n一方面是对理论的实践,加深了对控制系统的描述与理解,另一方面提高了解决问题的能力.","category":"page"},{"location":"Dynamic_simulation/Ai4EJumulink/#部分代码","page":"Ai4EJumulink","title":"部分代码","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4EJumulink/","page":"Ai4EJumulink","title":"Ai4EJumulink","text":"\"\"\"\r\n测试模块,定义了符号运算用以测试传函模块的正确性\r\n\"\"\"\r\nstruct Add\r\n    f::Symbol\r\n    l::Vector\r\n    r::Vector\r\nend\r\n\r\nstruct Tfs\r\n    n::Vector\r\n    d::Vector\r\nend\r\n\r\n\r\nBase.:*(x::Tfs, y::Tfs) = Tfs([x.n; y.n], [x.d; y.d])\r\nBase.:*(x::Tfs, y::Number) = Tfs([x.n; y], x.d)\r\nBase.:*(x::Number, y::Tfs) = y * x\r\nfunction Base.:*(x::Tfs...)\r\n    j = 1\r\n    for k in x\r\n        j *= k\r\n    end\r\n    return j\r\nend\r\nBase.:+(x::Tfs, y::Tfs) = Tfs([Add(:+, [x.n; y.d], [x.d; y.n])], [x.d; y.d])\r\nBase.:+(x::Tfs, y::Number) = Tfs([Add(:+, x.n, y * x.d)], x.d)\r\nBase.:+(x::Number, y::Tfs) = y + x\r\nBase.:/(x::Tfs, y::Tfs) = Tfs([x.n; y.d], [x.d; y.n])\r\nBase.:/(x::Tfs, y::Number) = Tfs(x.n, [y; x.d])\r\nBase.:/(x::Number, y::Tfs) = Tfs([x; y.d], y.n)\r\n\r\nfunction arrange(x::Vector)\r\n    n = [1]\r\n    s = []\r\n    a = []\r\n    for i = 1:length(x)\r\n        if x[i] isa Number\r\n            push!(n, x[i])\r\n        elseif x[i] isa Symbol\r\n            push!(s, x[i])\r\n        else\r\n            push!(a, x[i])\r\n        end\r\n    end\r\n    n = *(n...)\r\n    if n == 1\r\n        return [s; a]\r\n    else\r\n        return [n; s; a]\r\n    end\r\nend\r\n\r\nfunction Base.show(io::IO, x::Add)\r\n    l = arrange(x.l)\r\n    r = arrange(x.r)\r\n    print(io, \"($(l...) $(x.f) $(r...))\")\r\n    nothing\r\nend\r\n\r\nfunction Base.show(io::IO, x::Tfs)\r\n    n = arrange(x.n)\r\n    d = arrange(x.d)\r\n    println(io, \"$(n...)\")\r\n    println(io, repeat(\"-\", length(d) * 6))\r\n    println(io, \"$(d...)\")\r\n    nothing\r\nend","category":"page"},{"location":"assets/优化/优化板块部分代码/","page":"-","title":"-","text":"function optimize_ies_ele!(machines::Tuple, isOpt::Vector, fin::Financial, ::Val{1})\n    pv, wt, ec, hc, _ = machines\n    isOpt = isOpt[1:4]\n    obj = function (x)\n        # 顺序为光伏、风机、电解槽、储氢，顺序不能错！！！\n        machines = matchOptVars((pv, wt, ec, hc), isOpt, x)\n        wt_power, pv_power, load_power, hc_power = map(outputEnergy, machines)\n        powers = (wt_power, pv_power, load_power, hc_power)\n        # 供给-需求=ΔE\n        ΔE = wt_power + pv_power - load_power - hc_power\n        # 余电上网，网汇购电\n        ΔE_to_grid, ΔE_from_grid = pn_split(ΔE)\n        # 返回 \"制氢价格（元/kg）\"，该数值即为待优化的目标值\n        dictData = economicAnalysisData(machines, fin, powers,\n            (sum(ΔE_to_grid), sum(ΔE_from_grid), 0), Val(1))\n        objective = -abs(1 / dictData[\"静态总投资回收年限（年）\"])\n        return objective\n    end\n    # 调用优化求解器，可查BlackBoxOptim.jl文档\n    res = bboptimize(obj; SearchRange=(1e1, 1e7),\n        NumDimensions=sum(isOpt), TraceMode=:verbose)\n    # 输出优化结果\n    candidate, fitness = best_candidate(res), best_fitness(res)\n    println(\"优化变量结果： $candidate\", \"目标值： $fitness\")\n    machines = matchOptVars((pv, wt, ec, hc), isOpt, candidate)\n    # 返回最优解的仿真结果\n    return simulate_ies_ele!((machines..., 0), fin, Val(1))\nend","category":"page"},{"location":"assets/优化/优化板块部分代码/","page":"-","title":"-","text":"function simulate_ies_ele!(machines::Tuple, fin::Financial, ::Val{1})\n    pv, wt, ec, hc, _ = machines\n    pv_power, wt_power, load_power = map(outputEnergy, (pv, wt, ec))\n    # println(load_power)\n    hc.load = outputH2Mass(load_power, ec, 1.0)\n    hc_power = outputEnergy(hc)\n    powers = (pv_power, wt_power, load_power, hc_power)\n    # 供给-需求=ΔE\n    ΔE = wt_power + pv_power - load_power - hc_power\n    # 余电上网，网汇购电\n    ΔE_to_grid, ΔE_from_grid = pn_split(ΔE)\n    machines = (pv, wt, ec, hc)\n    fd = figureDictData(wt_power, pv_power, load_power, hc_power,\n        ΔE_to_grid, ΔE_from_grid, Val(1))\n    ecd = economicAnalysisData(machines, fin, powers,\n        (sum(ΔE_to_grid), sum(ΔE_from_grid), 0), Val(1))\n    return fd, ecd\nend","category":"page"},{"location":"assets/优化/优化板块部分代码/","page":"-","title":"-","text":"data_weather = CSV.File(joinpath(@__DIR__, \"./CNPC/data/weather_lenghu_2018.csv\"); select=[\"glob_hor_rad\", \"DBT\", \"wind_speed\"])\nconst S1_DATA_GI = data_weather.glob_hor_rad\nconst S1_DATA_TA = data_weather.DBT\nconst S1_DATA_WS = data_weather.wind_speed\n# const S1_DATA_LOAD = 5285.41 * ones(Float64, 8760)\n\ndata_weather = CSV.File(joinpath(@__DIR__, \"./CNPC/data/weather_lenghu_2018.csv\"); select=[\"dir_nor_rad\", \"DBT\", \"wind_speed\"])\n\nconst S2_DATA_GI = data_weather.dir_nor_rad\nconst S2_DATA_TA = data_weather.DBT\nconst S2_DATA_WS = data_weather.wind_speed\n\n# 跨域解决方案\nconst CORS_HEADERS = [\n  \"Access-Control-Allow-Origin\" => \"*\",\n  \"Access-Control-Allow-Headers\" => \"*\",\n  \"Access-Control-Allow-Methods\" => \"POST, GET, OPTIONS\"\n]\n\nfunction CorsMiddleware(handler)\n  return function (req::HTTP.Request)\n    # println(\"CORS middleware\")\n    # determine if this is a pre-flight request from the browser\n    if HTTP.method(req) ∈ [\"POST\", \"GET\", \"OPTIONS\"]\n      return HTTP.Response(200, CORS_HEADERS, HTTP.body(handler(req)))\n    else\n      return handler(req) # passes the request to the AuthMiddleware\n    end\n  end\nend\n\n@post \"/simulation\" function (req)\n  # 将HTTP请求的正文（request body）转换为 Julia 中的字典（Dict）数据结构\n  paras = json(req)\n  # 调用后端模型获得数据\n  #table = simulate!(paras[\"inputdata\"], Val(paras[\"mode\"]))\n  #println(paras)\n  figure, table = simulate!(paras[\"inputdata\"], Val(paras[\"mode\"]))\n  #println(figure)\n  # 返回数据，匹配前端request要求的格式\n  return Dict(\n    \"code\" => 200,\n    \"message\" => \"success\",\n    \"data\" => Dict(\n      # \"table\" => getTableData(table),\n      \"table\" => OrderedDict(k => round(v, digits=2) for (k, v) in table),\n      \"figure\" => Dict(\n        \"xyAxis\" => figure,\n      )\n    ))\nend","category":"page"},{"location":"assets/优化/优化板块部分代码/","page":"-","title":"-","text":"\"\"\"\n风力发电机\n\n组件参数:\n- `input_v`: 环境风速输入\n- `capacity`: 总装机容量， kW\n- `unit_capacity`: 单机容量， kW\n- `machine_number`: 机组数量\n- `Δt`: 采样时间， h\n- `η_t`: 风轮传动效率\n- `η_g`: 发电机效率\n- `h1`: 风速切入速度， m/s\n- `h2`: 风速切出速度， m/s\n- `α`: 风速指数\n- `η_inverter`: 综合效率，如考虑逆变器、电机效率等\n- `life_year`: 使用年限，年\n- `cost_initial`: 初始成本，元/kW\n- `cost_OM`: 年运维成本，元/kW\n- `cost_replace`: 更换成本，元/kW\n- `k `: 风速-功率曲线\n- `staff_number`: 人员数\n\n\"\"\"\nBase.@kwdef mutable struct WindTurbine <: RenewableEnergyMachine\n    input_v::Vector = Float64[]\n    capacity::Float64 = 4e6\n    unit_capacity::Float64 = 1.0\n    machine_number::Int64 = 1\n    Δt::Float64 = 1.0\n    η_t::Float64 = 0.96\n    η_g::Float64 = 0.93\n    h1::Float64 = 10.0\n    h2::Float64 = 135.0\n    α::Float64 = 1.0 / 7.0\n    η_inverter::Float64 = 1.0\n    life_year::Float64 = 20.0\n    cost_initial::Float64 = 4800.0\n    cost_OM::Float64 = 720.0\n    cost_replace::Float64 = 4800.0\n    k::Function = k\n    staff_number::Int64 = 50\nend\n\nk(v2) = ifelse(v2 < 3.0, 0.0,\n    ifelse(3.0 <= v2 < 9.5, (-30.639 * v2^3 + 623.5 * v2^2 - 3130.4 * v2 + 4928) / 5000,\n        ifelse(9.5 <= v2 < 19.5, 1.0,\n            ifelse(19.5 <= v2 <= 25.0, (-203.97 * v2 + 9050.9) / 5000, 0.0))))\n\n\"\"\"\n\n光伏组件\n\n组件参数:\n- `input_GI`: 光照强度输入， Wh/m2\n- `input_Ta`: 环境温度输入， ℃\n- `input_v`: 风速输入， m/s\n- `capacity`: 总装机容量， kW\n- `unit_capacity`: 单机容量， kW\n- `machine_number`: 机组数量\n- `Δt`: 采样时间， h\n- `A`: 光伏板面积， m2\n- `f_PV`: 光伏板填充因子\n- `η_PV_ref`: 光伏板额定转换效率\n- `λ`: 光伏板温度系数\n- `Tc_ref`: 光伏板额定温度， ℃\n- `tau_alpha`: 光伏板吸收率\n- `η_inverter`: 综合效率，如考虑逆变器、电机效率等\n- `life_year`: 使用年限，年\n- `cost_initial`: 初始成本，元/kW\n- `cost_OM`: 年运维成本，元/kW\n- `cost_replace`: 更换成本，元/kW\n- `staff_number`: 人员数\n\n\"\"\"\nBase.@kwdef mutable struct PhotovoltaicCell <: RenewableEnergyMachine\n    input_GI::Vector = Float64[]\n    input_Ta::Vector = Float64[]\n    input_v::Vector = Float64[]\n    capacity::Float64 = 1e7\n    unit_capacity::Float64 = 1.0\n    machine_number::Int64 = 1\n    Δt::Float64 = 1.0\n    A::Float64 = 3.1\n    f_PV::Float64 = 1 \n    η_PV_ref::Float64 = 20.9 / 100\n    λ::Float64 = -0.34 / 100\n    Tc_ref::Float64 = 25.0\n    tau_alpha::Float64 = 0.9\n    η_inverter::Float64 = 0.98\n    life_year::Float64 = 20.0\n    cost_initial::Float64 = 3800.0\n    cost_OM::Float64 = 190.0\n    cost_replace::Float64 = 3800.0\n    staff_number::Int64 = 50\nend","category":"page"},{"location":"Optimization/风光制氢/#风光制氢","page":"风光制氢","title":"风光制氢","text":"","category":"section"},{"location":"Optimization/风光制氢/#简介","page":"风光制氢","title":"简介","text":"","category":"section"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"风光制氢场景针对制氢需求量，考虑风光制氢余电不上网场景的技术经济性，重点研究储氢和储能模块对综合含税售氢价格的影响，主要包含三大模块：","category":"page"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"（1）基于给定场景的系统组件拓扑结构，输入相应的算例参数，实现对应场景8760小时仿真计算的仿真模块；","category":"page"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"（2）采用元启发式优化方法获得相应场景下最佳容量配置的优化模块；","category":"page"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"（3）计算对应场景在行业基准参数下的经济性评价模块；","category":"page"},{"location":"Optimization/风光制氢/#操作演示","page":"风光制氢","title":"操作演示","text":"","category":"section"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"(Image: )","category":"page"},{"location":"Optimization/风光制氢/#风光制氢模式图","page":"风光制氢","title":"风光制氢模式图","text":"","category":"section"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"(Image: img) ","category":"page"},{"location":"Optimization/风光制氢/#优化结果输出","page":"风光制氢","title":"优化结果输出","text":"","category":"section"},{"location":"Optimization/风光制氢/#系统小时运行图（堆叠）——周数据:","page":"风光制氢","title":"系统小时运行图（堆叠）——周数据:","text":"","category":"section"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"(Image: )","category":"page"},{"location":"Optimization/风光制氢/#系统小时运行图（平铺）——周数据","page":"风光制氢","title":"系统小时运行图（平铺）——周数据","text":"","category":"section"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"(Image: )","category":"page"},{"location":"Optimization/风光制氢/#规模与经济性表","page":"风光制氢","title":"规模与经济性表","text":"","category":"section"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"(Image: )","category":"page"},{"location":"Optimization/风光制氢/#部分代码","page":"风光制氢","title":"部分代码","text":"","category":"section"},{"location":"Optimization/风光制氢/","page":"风光制氢","title":"风光制氢","text":"function optimize_ies_ele!(machines::Tuple, isOpt::Vector, fin::Financial, ::Val{1})\r\n    pv, wt, ec, hc, _ = machines\r\n    isOpt = isOpt[1:4]\r\n    obj = function (x)\r\n        # 顺序为光伏、风机、电解槽、储氢，顺序不能错！！！\r\n        machines = matchOptVars((pv, wt, ec, hc), isOpt, x)\r\n        wt_power, pv_power, load_power, hc_power = map(outputEnergy, machines)\r\n        powers = (wt_power, pv_power, load_power, hc_power)\r\n        # 供给-需求=ΔE\r\n        ΔE = wt_power + pv_power - load_power - hc_power\r\n        # 余电上网，网汇购电\r\n        ΔE_to_grid, ΔE_from_grid = pn_split(ΔE)\r\n        # 返回 \"制氢价格（元/kg）\"，该数值即为待优化的目标值\r\n        dictData = economicAnalysisData(machines, fin, powers,\r\n            (sum(ΔE_to_grid), sum(ΔE_from_grid), 0), Val(1))\r\n        objective = -abs(1 / dictData[\"静态总投资回收年限（年）\"])\r\n        return objective\r\n    end\r\n    # 调用优化求解器，可查BlackBoxOptim.jl文档\r\n    res = bboptimize(obj; SearchRange=(1e1, 1e7),\r\n        NumDimensions=sum(isOpt), TraceMode=:verbose)\r\n    # 输出优化结果\r\n    candidate, fitness = best_candidate(res), best_fitness(res)\r\n    println(\"优化变量结果： $candidate\", \"目标值： $fitness\")\r\n    machines = matchOptVars((pv, wt, ec, hc), isOpt, candidate)\r\n    # 返回最优解的仿真结果\r\n    return simulate_ies_ele!((machines..., 0), fin, Val(1))\r\nend\r\n\r\n\"\"\"\r\n\r\n光伏组件\r\n\r\n组件参数:\r\n- `input_GI`: 光照强度输入， Wh/m2\r\n- `input_Ta`: 环境温度输入， ℃\r\n- `input_v`: 风速输入， m/s\r\n- `capacity`: 总装机容量， kW\r\n- `unit_capacity`: 单机容量， kW\r\n- `machine_number`: 机组数量\r\n- `Δt`: 采样时间， h\r\n- `A`: 光伏板面积， m2\r\n- `f_PV`: 光伏板填充因子\r\n- `η_PV_ref`: 光伏板额定转换效率\r\n- `λ`: 光伏板温度系数\r\n- `Tc_ref`: 光伏板额定温度， ℃\r\n- `tau_alpha`: 光伏板吸收率\r\n- `η_inverter`: 综合效率，如考虑逆变器、电机效率等\r\n- `life_year`: 使用年限，年\r\n- `cost_initial`: 初始成本，元/kW\r\n- `cost_OM`: 年运维成本，元/kW\r\n- `cost_replace`: 更换成本，元/kW\r\n- `staff_number`: 人员数\r\n\r\n\"\"\"\r\nBase.@kwdef mutable struct PhotovoltaicCell <: RenewableEnergyMachine\r\n    input_GI::Vector = Float64[]\r\n    input_Ta::Vector = Float64[]\r\n    input_v::Vector = Float64[]\r\n    capacity::Float64 = 1e7\r\n    unit_capacity::Float64 = 1.0\r\n    machine_number::Int64 = 1\r\n    Δt::Float64 = 1.0\r\n    A::Float64 = 3.1\r\n    f_PV::Float64 = 1 \r\n    η_PV_ref::Float64 = 20.9 / 100\r\n    λ::Float64 = -0.34 / 100\r\n    Tc_ref::Float64 = 25.0\r\n    tau_alpha::Float64 = 0.9\r\n    η_inverter::Float64 = 0.98\r\n    life_year::Float64 = 20.0\r\n    cost_initial::Float64 = 3800.0\r\n    cost_OM::Float64 = 190.0\r\n    cost_replace::Float64 = 3800.0\r\n    staff_number::Int64 = 50\r\nend","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#PID控制仿真实验","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/#简介","page":"PID控制仿真实验","title":"简介","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"该部分通过调节和优化参数，对不同参数组合的仿真结果进行比较，评估PID（比例-积分-微分）控制器在系统中的性能表现，包括稳态误差、响应时间、抗干扰能力等指标，以找到最佳的PID控制器参数，实现更好的控制效果，提高系统的控制精度和稳定性。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#操作演示","page":"PID控制仿真实验","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"PID控制仿真基于自动控制原理，利用Julia语言对典型的PID控制环节进行了建模，并创建了基于该控制器的，控制对象为无自平衡能力系统的二输入(控制，扰动)单输出自动控制系统。同时利用状态空间法进行求解，并进行了可视化处理。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#PID控制器的系统原理图","page":"PID控制仿真实验","title":"PID控制器的系统原理图","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"用户在仿真软件中选择控制系统仿真模块，并进入设置界面。通过调整PID控制器的参数（包括理想PID参数和实际PID参数）以及其他控制器参数，对系统进行优化。设置完成之后，用户可以点击软件界面上的开始按钮，启动控制系统的仿真过程。仿真软件将模拟系统的动态响应，并输出相应的结果。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#PID控制结果仿真图","page":"PID控制仿真实验","title":"PID控制结果仿真图","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"(Image: 实际PID控制响应图)","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"(Image: 实际PID扰动响应图)","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"此仿真通过调节PID控制器的参数，有助于用户探究不同控制参数以及不同输入(阶跃形式，幅值可调)对该系统稳定性，快速性及准确性的影响，并形成对PID控制的感性认知，以及对各控制参数产生的影响的定性理解，从而优化PID控制器的参数配置，提高系统的控制性能，实现系统的稳定控制，并预测系统在不同工况下的稳定性。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#部分代码","page":"PID控制仿真实验","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"\"\"\"\r\n生成控制器传递函数\r\n\"\"\"\r\nfunction transfer_function(x::IdealPid)\r\n    if x.T1 == 0 && x.T2 != 0\r\n        # PD控制\r\n        return Polynomial1([x.K, x.K * x.T2])\r\n    elseif x.T2 == 0 && x.T1 != 0\r\n        # PI控制\r\n        return Fraction1([x.K, x.K * x.T1], [0, x.T1])\r\n    else\r\n        # PID控制\r\n        return Fraction1([x.K, x.K * x.T1, x.K * x.T1 * x.T2], [0, x.T1])\r\n    end\r\nend\r\nfunction transfer_function(x::ActualPid)\r\n    i = Fraction1([1], [0, x.T1])\r\n    d = Fraction1([0, x.k2 * x.T2], [1, x.T2])\r\n    if x.T1 == 0 && x.T2 != 0\r\n        # PD控制\r\n        return x.K * (1 + d)\r\n    elseif x.T2 == 0 && x.T1 != 0\r\n        # PI控制\r\n        return x.K * (1 + i)\r\n    else\r\n        # PID控制\r\n        return x.K * (1 + i + d)\r\n    end\r\nend\r\n\r\n\"\"\"\r\n单位正阶跃函数\r\n\"\"\"\r\nfunction positive_step(t; τ₀=0.0)\r\n    if t <= τ₀\r\n        return 0\r\n    else\r\n        return 1\r\n    end\r\nend","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID控制仿真实验","title":"PID控制仿真实验","text":"","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#Ai4ESimulator","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/#简介","page":"Ai4ESimulator","title":"简介","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"高可拓展的云架构流程系统仿真平台Ai4ESimulator基于新一代开源科学计算编程语言Julia与Vue3前端框架，适用于复杂流程系统的云仿真平台。云仿真平台采用前后端分离技术:前端为Web界面;后端为集解析器、组件库、求解器三大模块为一体的仿引擎，各模块间通过接口协同工作。仿真平台具备高度可拓展性，后端参析器可嵌入参数辨识问题、优化问题、控制问题等多种问题的代码生成工具;组件库广泛适用于能源、化工、机器、电气等多个领域的流程系统模型。","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#案例","page":"Ai4ESimulator","title":"案例","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/#.电解槽","page":"Ai4ESimulator","title":"1.电解槽","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"使用光伏电池驱动电解槽是一种利用太阳能直接驱动电解过程的技术。通过将光伏电池与电解槽相连接，可以将太阳能光能转化为电能，并利用该电能进行电解反应。","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#操作演示","page":"Ai4ESimulator","title":"操作演示","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#部分代码","page":"Ai4ESimulator","title":"部分代码","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"using ModelingToolkit, DifferentialEquations\r\nusing Ai4EComponentLib\r\nusing Ai4EComponentLib.Electrochemistry\r\n\r\n@named Pv = PhotovoltaicCell()\r\n@named El = PEMElectrolyzer()\r\n@named ground = Ground()\r\neqs = [\r\n    connect(Pv.p, El.p)\r\n    connect(Pv.n, El.n, ground.g)\r\n]\r\n@named OdeFun = ODESystem(eqs, t)\r\n@named model = compose(OdeFun, [Pv, El, ground])\r\nsys = structural_simplify(model)\r\nu0 = [\r\n    El.m_H_2 => 0.0\r\n    El.∂_m_H_2 => 0.0\r\n]\r\nprob = ODEProblem(sys, u0, (0.0, 30.0))\r\nsol = solve(prob)","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#.锂电池","page":"Ai4ESimulator","title":"2.锂电池","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"为了将光伏电池生成的直流电能存储起来，需要使用储能系统，而锂电池是一种常用的选择。光伏电池阵列中的直流电能经过电流调节和逆变等电子设备的处理后，可输入到锂电池系统中进行充电。锂电池的特点是能量密度高、寿命长、充放电效率高等，因此被广泛应用于储能领域。当太阳能充足时，光伏电池会将多余的能量存储到锂电池中，以备晚上或阴天时使用。这种方式实现了可再生能源的利用和能源的平衡，有助于减少对传统能源的依赖，降低碳排放并提高能源的可持续性。","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#操作实例","page":"Ai4ESimulator","title":"操作实例","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#部分代码-2","page":"Ai4ESimulator","title":"部分代码","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"using ModelingToolkit, DifferentialEquations\r\nusing Ai4EComponentLib\r\nusing Ai4EComponentLib.Electrochemistry\r\nusing Plots\r\n\r\n@named batter = Lithium_ion_batteries()\r\n@named Pv = PhotovoltaicCell()\r\n@named ground = Ground()\r\n\r\neqs = [\r\n    connect(batter.p, Pv.p)\r\n    connect(batter.n, Pv.n, ground.g)\r\n]\r\n\r\n@named OdeFun = ODESystem(eqs, t)\r\n@named model = compose(OdeFun, [Pv, batter, ground])\r\nsys = structural_simplify(model)\r\nu0 = [\r\n    batter.v_f => 0.5\r\n    batter.v_s => 0.5\r\n    batter.v_soc => 0.5\r\n]\r\nprob = ODEProblem(sys, u0, (0.0, 3600.0))\r\nsol = solve(prob)","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#.空气管道系统","page":"Ai4ESimulator","title":"3.空气管道系统","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/#系统模式图","page":"Ai4ESimulator","title":"系统模式图","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#操作实例：","page":"Ai4ESimulator","title":"操作实例：","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#部分代码-3","page":"Ai4ESimulator","title":"部分代码","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"# Define components\r\nusing Ai4EComponentLib\r\nusing Ai4EComponentLib.AirPipeSim\r\nusing ModelingToolkit, DifferentialEquations\r\n\r\n@named inlet = PressureSource(p=6e5, T=300)\r\n@named pipe1 = AirSimplePipe(R=100, T=300)\r\n@named pipe2 = TransitionPipe(n=20, f=0.016, D=0.2, L=100, T=300, pins=5.6e5, pouts=4e5)\r\n@named airTank = AirStorageTank(V=20, T=300, p0=4e5)\r\n@named pipe3 = TransitionPipe(n=20, f=0.016, D=0.2, L=100, T=300, pins=4e5, pouts=2e5)\r\n@named outlet = FlowSource(qm=-3.0, T=300)\r\n\r\n# Connect components\r\neqs=[\r\n    connect(inlet.port,pipe1.inlet)\r\n    connect(pipe1.outlet,pipe2.inlet)\r\n    connect(pipe2.outlet,airTank.inlet)\r\n    connect(airTank.outlet,pipe3.inlet)\r\n    connect(pipe3.outlet,outlet.port)\r\n]\r\n\r\n@named connects=ODESystem(eqs,t)\r\n@named model=compose(connects,inlet,pipe1,pipe2,pipe3,airTank,outlet)\r\n\r\n# Simplify the system and solve\r\nsys=structural_simplify(model)\r\n\r\nprob=ODAEProblem(sys,[],(0.0,5.0))\r\n\r\nsol=solve(prob,Rosenbrock23())","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#.水利管网系统","page":"Ai4ESimulator","title":"4.水利管网系统","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/#系统模型图","page":"Ai4ESimulator","title":"系统模型图","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#操作实例-2","page":"Ai4ESimulator","title":"操作实例","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#部分代码-4","page":"Ai4ESimulator","title":"部分代码","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"@info \"Running IncompressiblePipe...\"\r\nusing Ai4EComponentLib\r\nusing Ai4EComponentLib.IncompressiblePipe\r\nusing OrdinaryDiffEq, ModelingToolkit\r\nusing Test\r\n\r\n@info \"Constructing components...\"\r\n@named high = Source_P(D=0.15, z=25.0, ρ=1.0E3, p=101325, K_inlet=0.5)\r\n@named low = Sink_P(p=101325)\r\n@named elbow1 = ElbowPipe(K=0.9, D=0.15, ρ=1.0E3, zin=0.0, zout=0.0)\r\n@named elbow2 = ElbowPipe(K=0.9, D=0.15, ρ=1.0E3, zin=15.0, zout=15.0)\r\n@named pipe1 = SimplePipe(L=30.0, D=0.15, f=0.023, zin=25.0, zout=0.0, K_inside=0.0)\r\n@named pipe2 = SimplePipe(L=15.0, D=0.15, f=0.023, zin=0.0, zout=15.0, K_inside=0.0)\r\n@named pipe3 = SimplePipe(L=60.0, D=0.15, f=0.023, zin=15.0, zout=15.0, K_inside=10.8)\r\n\r\n@info \"Constructing system...\"\r\neqs = [\r\n    connect(high.port, pipe1.in)\r\n    connect(pipe1.out, elbow1.in)\r\n    connect(elbow1.out, pipe2.in)\r\n    connect(pipe2.out, elbow2.in)\r\n    connect(elbow2.out, pipe3.in)\r\n    connect(pipe3.out, low.port)\r\n]\r\n\r\n@named model = compose(ODESystem(eqs, t, name=:funs), [high, low, pipe1, pipe2, pipe3, elbow1, elbow2])\r\n\r\n@info \"Simplifying system...\"\r\nsys = structural_simplify(model)\r\n\r\n@info \"Solving system...\"\r\nprob = ODEProblem(sys, [], (0, 0))\r\nsol = solve(prob, Rosenbrock23())\r\n\r\n@test isapprox(sol[pipe1.in.q][1], 0.045, atol=0.0005)","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#.热力循环系统","page":"Ai4ESimulator","title":"5.热力循环系统","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"整个朗肯循环由热能输入、膨胀、冷凝和压缩等过程组成。通过这些过程，热能源被转化为机械能输出。朗肯循环具有稳定的动力输出和较高的能量效率，其中一部分能量通过冷凝器中的热回收得以回收利用，从而提高了系统的能量效率。","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#系统模式图-2","page":"Ai4ESimulator","title":"系统模式图","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#操作实例-3","page":"Ai4ESimulator","title":"操作实例","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Ai4ESimulator/#部分代码-5","page":"Ai4ESimulator","title":"部分代码","text":"","category":"section"},{"location":"Dynamic_simulation/Ai4ESimulator/","page":"Ai4ESimulator","title":"Ai4ESimulator","text":"@info \"Running ThermodynamicCycle...\"\r\nusing Ai4EComponentLib\r\nusing Ai4EComponentLib.ThermodynamicCycle\r\nusing OrdinaryDiffEq, ModelingToolkit\r\nusing Test\r\n\r\n@info \"Constructing components...\"\r\n@named pump = IsentropicProcess(inter_state=\"P\")\r\n@named pump_P = ThermalStates(state=\"P\", value=3.0E6)\r\n\r\n@named boiler = IsobaricProcess(inter_state=\"T\")\r\n@named boiler_T = ThermalStates(state=\"T\", value=723.15)\r\n\r\n@named turbine = IsentropicProcess(inter_state=\"P\")\r\n@named turbine_P = ThermalStates(state=\"P\", value=4.0E3)\r\n\r\n@named condenser = IsothermalProcess(inter_state=\"Q_0\")\r\n\r\n@info \"Constructing system...\"\r\neqs = [\r\n    connect(pump.out, boiler.in)\r\n    connect(boiler.in, pump_P.node)\r\n    connect(boiler.out, turbine.in)\r\n    connect(turbine.in, boiler_T.node)\r\n    connect(turbine.out, condenser.in)\r\n    connect(condenser.in, turbine_P.node)\r\n    connect(condenser.out, pump.in)\r\n]\r\n\r\n@named model = ODESystem(eqs, t, systems=[pump, boiler, turbine, condenser, pump_P, boiler_T, turbine_P])\r\n\r\n@info \"Simplifying system...\"\r\nsys = structural_simplify(model)\r\n\r\n@info \"Solving system...\"\r\nprob = ODEProblem(sys, [], (0, 0))\r\nsol = solve(prob, Rosenbrock23())\r\n\r\nq1 = sol[boiler.Δh][1]\r\nw = -sol[turbine.Δh][1] - sol[pump.Δh][1]\r\n\r\n@test isapprox(w / q1, 0.4, atol=0.05)","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#顺流与逆流式换热器仿真","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#简介","page":"顺流与逆流式换热器仿真","title":"简介","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"该部分支持套管式换热器在顺流与逆流两种流态下的仿真。通过用户输入换热器的长度、介质种类、冷热流入口温度、流量等参数，计算出冷热流体不同位置的温度值以及整体换热效率等信息，用户能更直观地了解到换热器的换热情况，并调整真实模型的相关参数，从而提高换热器效率。此仿真过程将换热原理与ODE结合，使模型更精准。","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#操作演示","page":"顺流与逆流式换热器仿真","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#顺流逆流换热器系统模型图","page":"顺流与逆流式换热器仿真","title":"顺流逆流换热器系统模型图","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"用户在仿真软件中选择换热器模块，并进入设置界面，从下拉菜单中选择热流体的类型（液态水、空气）并输入相关参数（冷热流体流量、换热管长度等），最后点击软件界面上的开始按钮，启动套管式换热器的仿真过程。","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#仿真结果图","page":"顺流与逆流式换热器仿真","title":"仿真结果图","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#仿真参数输出","page":"顺流与逆流式换热器仿真","title":"仿真参数输出","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"软件将计算并生成热流与冷流的温度随距入口大小变化的T-X图以及包含换热效率、热流雷诺数等参数的结果输出表。用户可以通过这些结果图来评估换热器的性能和工作状态。","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#部分代码","page":"顺流与逆流式换热器仿真","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"function heat_exchanger!(du,u,p,t)\r\n\t\t#比热容\r\n\t\tCp_h = CoolProp.PropsSI(\"C\", \"T\", u[1], \"P\", p[3],p[4])\r\n\t\tCp_c = CoolProp.PropsSI(\"C\", \"T\", u[2], \"P\", p[3],p[9])\r\n\t\t#计算动态粘度\r\n\t\tμ_h = CoolProp.PropsSI(\"V\", \"T\", u[1], \"P\", p[3], p[4])\r\n\t\tμ_c = CoolProp.PropsSI(\"V\", \"T\", u[2], \"P\", p[3], p[9])\r\n\r\n\t\t#计算普朗特数\r\n\t\tPr_h = CoolProp.PropsSI(\"Prandtl\", \"T\", u[1], \"P\", p[3], p[4])\r\n\t\tPr_c = CoolProp.PropsSI(\"Prandtl\", \"T\", u[2], \"P\", p[3], p[9])\r\n\r\n\t\t#计算雷诺数\r\n\t\tRe_h = 4*p[1]/p[6]/μ_h/π\r\n\t\tRe_c = 4*p[2]/p[7]/μ_c/π\r\n\r\n\t\t#计算努塞尔数\r\n\t\tif Re_c > 10000\r\n\t\t\tNu_c = 0.023*(Re_c^0.8)*(Pr_c^0.4)\r\n\t\telse\r\n\t\t\tNu_c = 4.36\r\n\t\tend\r\n\t\tif Re_h > 10000\r\n\t\t\tNu_h = 0.023*(Re_h^0.8)*(Pr_h^0.3)\r\n\t\telse\r\n\t\t\tNu_h = 4.36\r\n\t\tend\r\n\r\n\t\t#计算传热系数\r\n\t\tk_h = CoolProp.PropsSI(\"L\", \"T\", u[1], \"P\", p[3], p[4])\r\n\t\tk_c = CoolProp.PropsSI(\"L\", \"T\", u[2], \"P\", p[3], p[9])\r\n\r\n\t\tη_h = Nu_h*k_h/p[6]\r\n\t\tη_c = Nu_c*k_c/p[7]\r\n\t\t#计算传热系数U\r\n\t\tU = (1/η_h+1/η_c)^(-1)\r\n\t\t#计算热传导方程 [1]为热流 [2]为冷流\r\n\t\tdu[1] = U*π*p[6]*(u[2]-u[1])/(Cp_h*p[1])\r\n\t\tif Flow_type == \"parallel\"\r\n\t\t\tdu[2] = U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\r\n\t\telseif Flow_type == \"countercurrent\"\r\n\t\t\tdu[2] = -U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\r\n\t\tend\r\n\tend","category":"page"},{"location":"Optimization/风光煤气储发电/#风光煤气储发电","page":"风光煤气储发电","title":"风光煤气储发电","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/#简介","page":"风光煤气储发电","title":"简介","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"该功能针对风光气煤储外送通道场景，考虑风光气煤储典型场景的技术经济性，论证气电和煤电两种典型化石能源支撑新能源大基地的技术经济特征，重点研究两者调峰灵活性与经济性。模型中主要包含三大模块：","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"（1）基于给定场景的系统组件拓扑结构，输入相应的算例参数，实现对应场景8760小时仿真计算的仿真模块；","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"（2）采用元启发式优化方法获得相应场景下最佳容量配置的优化模块；","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"（3）计算对应场景在行业基准参数下的经济性评价模块；","category":"page"},{"location":"Optimization/风光煤气储发电/#操作演示","page":"风光煤气储发电","title":"操作演示","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#操作运行方法及效果","page":"风光煤气储发电","title":"操作运行方法及效果","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/#.模式选择","page":"风光煤气储发电","title":"1.模式选择","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"如下图所示，导航栏中选择风光制氢或者风光煤气储模式。","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#.系统图展示","page":"风光煤气储发电","title":"2.系统图展示","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"展示对应场景下系统图","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#.外送通道负荷","page":"风光煤气储发电","title":"3.外送通道负荷","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"外送通道负荷界面如图所示。外送通道负荷可实现数据的修改、导入和导出。","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#.参数输入与计算","page":"风光煤气储发电","title":"4.参数输入与计算","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"参数输入包含仿真计算参数输入与优化计算参数输入，如图3-25所示。仿真计算参数输入包含每种组件参数输入，滑动点击相应项即可切换对应组件（风电、光电、抽水蓄能、压缩空气储能、电化学储能、气电、煤电、经济性参数）的参数输入菜单。每种组件含有默认值，若不输入则直接采用默认值优化计算参数输入在仿真计算参数输入基础之上额外包含选择待优化容量参数下拉选择框。通过该选择框可选择需要优化的变量。优化计算参数输入与仿真计算参数输入中的组件参数修改界面相互关联，在任意一个界面中修改都可行。参数输入完成后点击按钮点击进行仿真/优化计算即可完成计算。","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#.环境数据输出图","page":"风光煤气储发电","title":"5.环境数据输出图","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"如图所示，展示了与堆叠图对应时间的环境数据图，可直观看出辐照强度与风速的大小。该图采用双Y轴图，左轴表示辐照强度，右轴表示风速。","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#.小时运行图","page":"风光煤气储发电","title":"6.小时运行图","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"如图所示，小时运行图包含周运行图与日运行图，可点击按钮进行切换。图例中包含各类电源的功率、网汇电量与弃电功率；8760小时分割为365天，一张图展示24小时数据，通过滑动条拖动切换日期；点击图例可选择是否显示该数据；右侧工具箱可实现图片下载、放大、缩小、切换为柱状图、切换为普通图、数据转化等；鼠标悬浮在数据点即可显示相关数据。","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#.规模与经济性表","page":"风光煤气储发电","title":"7.规模与经济性表","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"如图所示，表为横向表，可保留历史计算功能。每进行一次计算，规模与经济性数据向下新增。绘图历史数据不保留，绿色导出按钮可显示数据总量，点击导出Excel表格；每页最多保留10条记录，右下方可进行翻页。","category":"page"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"(Image: )","category":"page"},{"location":"Optimization/风光煤气储发电/#部分代码","page":"风光煤气储发电","title":"部分代码","text":"","category":"section"},{"location":"Optimization/风光煤气储发电/","page":"风光煤气储发电","title":"风光煤气储发电","text":"function simulate_ies_ele!(machines::Tuple, fin::Financial, ::Val{1})\r\n    pv, wt, ec, hc, _ = machines\r\n    pv_power, wt_power, load_power = map(outputEnergy, (pv, wt, ec))\r\n    # println(load_power)\r\n    hc.load = outputH2Mass(load_power, ec, 1.0)\r\n    hc_power = outputEnergy(hc)\r\n    powers = (pv_power, wt_power, load_power, hc_power)\r\n    # 供给-需求=ΔE\r\n    ΔE = wt_power + pv_power - load_power - hc_power\r\n    # 余电上网，网汇购电\r\n    ΔE_to_grid, ΔE_from_grid = pn_split(ΔE)\r\n    machines = (pv, wt, ec, hc)\r\n    fd = figureDictData(wt_power, pv_power, load_power, hc_power,\r\n        ΔE_to_grid, ΔE_from_grid, Val(1))\r\n    ecd = economicAnalysisData(machines, fin, powers,\r\n        (sum(ΔE_to_grid), sum(ΔE_from_grid), 0), Val(1))\r\n    return fd, ecd\r\nend\r\n\r\n\"\"\"\r\n风力发电机\r\n\r\n组件参数:\r\n- `input_v`: 环境风速输入\r\n- `capacity`: 总装机容量， kW\r\n- `unit_capacity`: 单机容量， kW\r\n- `machine_number`: 机组数量\r\n- `Δt`: 采样时间， h\r\n- `η_t`: 风轮传动效率\r\n- `η_g`: 发电机效率\r\n- `h1`: 风速切入速度， m/s\r\n- `h2`: 风速切出速度， m/s\r\n- `α`: 风速指数\r\n- `η_inverter`: 综合效率，如考虑逆变器、电机效率等\r\n- `life_year`: 使用年限，年\r\n- `cost_initial`: 初始成本，元/kW\r\n- `cost_OM`: 年运维成本，元/kW\r\n- `cost_replace`: 更换成本，元/kW\r\n- `k `: 风速-功率曲线\r\n- `staff_number`: 人员数\r\n\r\n\"\"\"\r\nBase.@kwdef mutable struct WindTurbine <: RenewableEnergyMachine\r\n    input_v::Vector = Float64[]\r\n    capacity::Float64 = 4e6\r\n    unit_capacity::Float64 = 1.0\r\n    machine_number::Int64 = 1\r\n    Δt::Float64 = 1.0\r\n    η_t::Float64 = 0.96\r\n    η_g::Float64 = 0.93\r\n    h1::Float64 = 10.0\r\n    h2::Float64 = 135.0\r\n    α::Float64 = 1.0 / 7.0\r\n    η_inverter::Float64 = 1.0\r\n    life_year::Float64 = 20.0\r\n    cost_initial::Float64 = 4800.0\r\n    cost_OM::Float64 = 720.0\r\n    cost_replace::Float64 = 4800.0\r\n    k::Function = k\r\n    staff_number::Int64 = 50\r\nend\r\n\r\nk(v2) = ifelse(v2 < 3.0, 0.0,\r\n    ifelse(3.0 <= v2 < 9.5, (-30.639 * v2^3 + 623.5 * v2^2 - 3130.4 * v2 + 4928) / 5000,\r\n        ifelse(9.5 <= v2 < 19.5, 1.0,\r\n            ifelse(19.5 <= v2 <= 25.0, (-203.97 * v2 + 9050.9) / 5000, 0.0))))","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#蒸汽动力循环仿真","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#简介","page":"蒸汽动力循环仿真","title":"简介","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"该部分支持三个循环（包括朗肯循环、再热循环以及制冷循环）模式的仿真。通过用户输入的参数（如冷凝器冷却压力、锅炉出口温度等），计算出整个循环过程中温度、压力、焓、熵等参数。同时，该部分使用单独描述系统中每个组件并连接在一起的组件化建模方法，极大地提高了建模的效率。用户可以据此比较不同循环参数和组件配置对性能的影响，优化循环设计，并找到达到最佳性能的操作条件。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#操作演示","page":"蒸汽动力循环仿真","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#三个循环仿真","page":"蒸汽动力循环仿真","title":"三个循环仿真","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#.朗肯循环","page":"蒸汽动力循环仿真","title":"1.朗肯循环","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#朗肯循环模型图","page":"蒸汽动力循环仿真","title":"朗肯循环模型图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#结果仿真图","page":"蒸汽动力循环仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#.再热循环","page":"蒸汽动力循环仿真","title":"2.再热循环","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"以再热循环为例，使用者可以根据实际系统特点和需求选择适当的模式。用户需要输入相关的仿真参数，包括冷凝器冷却压力、水泵供给压力等数据。之后，用户可以根据需要设置再热循环系统的运行条件和约束条件。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#再热循环模型图","page":"蒸汽动力循环仿真","title":"再热循环模型图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"在设置完毕后，用户点击仿真软件中的开始按钮，启动再热循环系统的仿真过程。仿真软件将根据设定的参数和条件，模拟再热循环系统在不同工况下的运行情况，最终输出结果图与包含汽轮机入口压力、汽轮机出入口温度、锅炉入口温度以及锅炉出入口压力等参数的结果输出表。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#结果仿真图-2","page":"蒸汽动力循环仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"用户可以通过生成的T-S结果图了解再热循环系统的运行状态，并评估其性能和效率。使用者也可以通过改变锅炉、汽轮机、冷凝器等组件的设计参数对系统进行人工优化，例如优化循环的热能转换效率和降低能量损失。还可以通过调整工作流体的参数，如温度、压力和流量等，来提高系统的整体效率。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#.制冷循环","page":"蒸汽动力循环仿真","title":"3.制冷循环","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#制冷循环模型图","page":"蒸汽动力循环仿真","title":"制冷循环模型图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#结果仿真图-3","page":"蒸汽动力循环仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#部分代码","page":"蒸汽动力循环仿真","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"function reheat_rankine(冷凝器冷却压力,\r\n                        水泵供给压力,\r\n                        锅炉出口温度,\r\n                        再热器出口温度,\r\n                        汽轮机一级出口压力,\r\n\t\t\t\t\t\t工质)\r\n\r\n    冷凝器冷却压力 = 冷凝器冷却压力 isa Number ? 冷凝器冷却压力 : parse(Float64,冷凝器冷却压力)\r\n    水泵供给压力 = 水泵供给压力 isa Number ? 水泵供给压力 : parse(Float64,水泵供给压力)\r\n    锅炉出口温度 = 锅炉出口温度 isa Number ? 锅炉出口温度 : parse(Float64,锅炉出口温度)\r\n    再热器出口温度 = 再热器出口温度 isa Number ? 再热器出口温度 : parse(Float64,再热器出口温度)\r\n    汽轮机一级出口压力 = 汽轮机一级出口压力 isa Number ? 汽轮机一级出口压力 : parse(Float64,汽轮机一级出口压力)\r\n\r\n    #创建组件...\r\n    @named pump = Pump(P = 水泵供给压力,fluid = 工质)\r\n    @named boiler = Boiler(T = 锅炉出口温度,fluid = 工质)\r\n    @named turbine = Turbine(P = 汽轮机一级出口压力,fluid = 工质)\r\n    @named reboiler = Boiler(T = 再热器出口温度,fluid = 工质)\r\n    @named returbine = Turbine(P = 冷凝器冷却压力,fluid = 工质)\r\n    @named condenser = Condenser(fluid = 工质)\r\n\r\n    #构建连接关系\r\n    rc_eqs = [\r\n      connect(pump.out, boiler.in)\r\n      connect(boiler.out, turbine.in)\r\n      connect(turbine.out, reboiler.in)\r\n      connect(reboiler.out, returbine.in)\r\n      connect(returbine.out, condenser.in)\r\n      connect(condenser.out, pump.in)\r\n      D(x) ~ 0\r\n    ]\r\n    @named _rc_model = ODESystem(rc_eqs, t0) #连接关系也需要放到ODESystem中\r\n\r\n    # 组件与组件连接关系一起构建系统\r\n    @named rc_model = compose(_rc_model,[turbine, condenser , pump, boiler,reboiler,returbine ])\r\n\r\n    # 系统化简\r\n    sys = structural_simplify(rc_model)\r\n    equations(sys) # 查看方程\r\n    # 求解\r\n    prob = ODAEProblem(sys, [0], (0, 0.0))\r\n    sol = solve(prob)\r\n\r\n    #println(sol)\r\n    table = OrderedDict(\"汽轮机一级入口压力(pa)\" => sol[turbine.in.p][1],\r\n    \"汽轮机一级入口温度(k)\" => sol[turbine.in.t][1],\r\n    \"汽轮机一级出口温度(k)\" => sol[turbine.out.t][1],\r\n    \"汽轮机一级出口熵(J/(mol*k))\" => sol[turbine.out.s][1],\r\n    \"锅炉入口温度(k)\"=> sol[boiler.in.t][1],\r\n    \"锅炉出口压力(pa)\"=> sol[boiler.out.p][1],\r\n    \"锅炉入口压力(pa)\"=> sol[boiler.in.p][1])\r\n\r\n    plot_sys = [pump, boiler, turbine, reboiler, returbine, condenser];\r\n    propx = :s\r\n    propy = :t\r\n\r\n    ss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\r\n    tt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\r\n\r\n    xAxis = collect(range(ss[1], ss[2], 15))\r\n    yAxis = CoolProp.PropsSI.(\"T\", \"P\", sol[pump.out.p], \"S\", collect(range(ss[1], ss[2], 15)), 工质)\r\n\r\n    append!(xAxis, collect(range(ss[2], ss[3], 15)))\r\n    append!(yAxis,collect(range(tt[2], tt[3], 15)))\r\n\r\n    append!(xAxis,collect(range(ss[3], ss[4], 15)))\r\n    append!(yAxis,CoolProp.PropsSI.(\"T\", \"P\", sol[reboiler.out.p], \"S\", collect(range(ss[3], ss[4], 15)), 工质))\r\n\r\n    append!(xAxis,collect(range(ss[4], ss[5], 15)))\r\n    append!(yAxis,collect(range(tt[4], tt[5], 15)))\r\n\r\n    append!(xAxis,collect(range(ss[5], ss[6], 15)))\r\n    append!(yAxis,collect(range(tt[5], tt[6], 15)))\r\n\r\n    append!(xAxis,collect(range(ss[6], ss[1], 15)))\r\n    append!(yAxis,collect(range(tt[6], tt[1], 15)))\r\n    # println(xAxis)\r\n    # println(yAxis)\r\n    figure = transposeMatrix(xAxis, yAxis)\r\n    #在本地绘图\r\n    plot_local(figure)\r\n    return figure,table\r\nend","category":"page"},{"location":"assets/静态仿真/文丘里管/代码/文丘里管部分代码/","page":"-","title":"-","text":"function simulation_Venturi_Meter(; Q,  friction::Bool = false, Media::String = \"Water\")\n  Q = Q isa Number ? Q : parse(Float64, Q)\n  \n  #参数\n  d = 0.1 #喉管直径\n  D = 0.2 #直径\n  T = 273.15 + 25 #温度\n  P0 = 0.1*1e5 #压力\n  ρ = PropsSI(\"D\", \"T\", T, \"P\", P0, Media) #密度\n  g = 9.8 #重力加速度\n  function ΔP(x)\n    if friction\n      if 0<= x< 0.2\n        return 0\n      elseif 0.2<= x< 0.4\n        return (0.5*ρ*(Q/(π*D^2/4))^2*0.04)*(x-0.2)/0.2\n      elseif 0.4<= x< 0.6\n        return 0.5*ρ*(Q/(π*D^2/4))^2*0.04\n      elseif 0.6<= x< 0.8\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45*(x-0.6)/0.2)\n      elseif 0.8<= x<= 1.0\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45)\n      end\n    else\n      return 0\n    end\n  end\n\n  p = [d, D, P0, ρ, g]\n\n  function h_column(x,p)\n    d_x = 0\n    if 0<= x< 0.2\n      d_x = p[2]\n    elseif 0.2<= x< 0.4\n      d_x = p[2]-(p[2]-p[1])/0.2*(x-0.2)\n    elseif 0.4<= x< 0.6\n      d_x = p[1]\n    elseif 0.6<= x< 0.8\n      d_x = p[1]+(p[2]-p[1])/0.2*(x-0.6)\n    elseif 0.8<= x<= 1.0\n      d_x = p[2]\n    end\n    V = Q/(π*d_x^2/4)\n    P = 1/2*p[4]*(Q/(π*p[2]^2/4))^2 + p[3] - (1/2*p[4]*V^2 + ΔP(x))\n    h = P/p[4]/p[5]\n  end\n\n  # 计算 h_column 函数的值\n  function calculate_values(p)\n    x_values = 0:0.01:1\n    return [h_column(x, p) for x in x_values]\n  end\n\n  # 绘制图像\n  x_values = 0:0.01:1\n  y_values = calculate_values(p)\n  figure = transposeMatrix(x_values, y_values)\n\n  return figure\nend","category":"page"},{"location":"assets/静态仿真/PID控制实验/代码/PID部分代码/","page":"-","title":"-","text":"\"\"\"\n生成控制器传递函数\n\"\"\"\nfunction transfer_function(x::IdealPid)\n    if x.T1 == 0 && x.T2 != 0\n        # PD控制\n        return Polynomial1([x.K, x.K * x.T2])\n    elseif x.T2 == 0 && x.T1 != 0\n        # PI控制\n        return Fraction1([x.K, x.K * x.T1], [0, x.T1])\n    else\n        # PID控制\n        return Fraction1([x.K, x.K * x.T1, x.K * x.T1 * x.T2], [0, x.T1])\n    end\nend\nfunction transfer_function(x::ActualPid)\n    i = Fraction1([1], [0, x.T1])\n    d = Fraction1([0, x.k2 * x.T2], [1, x.T2])\n    if x.T1 == 0 && x.T2 != 0\n        # PD控制\n        return x.K * (1 + d)\n    elseif x.T2 == 0 && x.T1 != 0\n        # PI控制\n        return x.K * (1 + i)\n    else\n        # PID控制\n        return x.K * (1 + i + d)\n    end\nend\n\n\"\"\"\n单位正阶跃函数\n\"\"\"\nfunction positive_step(t; τ₀=0.0)\n    if t <= τ₀\n        return 0\n    else\n        return 1\n    end\nend\n","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#文丘里管压力仿真","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/#简介","page":"文丘里管压力仿真","title":"简介","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"该部分利用了伯努利原理对不同参数（如流量、有无摩擦、介质种类等参数）下文丘里管压力分布进行仿真模拟。通过用户输入的不同参数，可以模拟在该参数约束下文丘里管的状态，从而使用户更直观地了解其压力分布情况。","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#操作演示","page":"文丘里管压力仿真","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#文丘里管系统原理图","page":"文丘里管压力仿真","title":"文丘里管系统原理图","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"用户可以在仿真软件中选择文丘里管压力仿真模式（是否考虑摩擦阻力）。进入设置界面，选择介质种类（如水、空气），输入流量。设置完成之后，用户可以点击软件界面上的开始按钮，启动控制系统的仿真过程。仿真软件将模拟系统的动态响应，最终得到直观的文丘里管压力分布图。","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#结果仿真图","page":"文丘里管压力仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"参考结果图，用户可以了解在此设置条件下管道中不同位置的压力分布情况。通过调整介质种类、体积流量等参数，用户还可以模拟不同工况下的压力情况，并优化管道设计以满足特定的需求。","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#部分代码","page":"文丘里管压力仿真","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"function simulation_Venturi_Meter(; Q,  friction::Bool = false, Media::String = \"Water\")\r\n  Q = Q isa Number ? Q : parse(Float64, Q)\r\n  \r\n  #参数\r\n  d = 0.1 #喉管直径\r\n  D = 0.2 #直径\r\n  T = 273.15 + 25 #温度\r\n  P0 = 0.1*1e5 #压力\r\n  ρ = PropsSI(\"D\", \"T\", T, \"P\", P0, Media) #密度\r\n  g = 9.8 #重力加速度\r\n  function ΔP(x)\r\n    if friction\r\n      if 0<= x< 0.2\r\n        return 0\r\n      elseif 0.2<= x< 0.4\r\n        return (0.5*ρ*(Q/(π*D^2/4))^2*0.04)*(x-0.2)/0.2\r\n      elseif 0.4<= x< 0.6\r\n        return 0.5*ρ*(Q/(π*D^2/4))^2*0.04\r\n      elseif 0.6<= x< 0.8\r\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45*(x-0.6)/0.2)\r\n      elseif 0.8<= x<= 1.0\r\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45)\r\n      end\r\n    else\r\n      return 0\r\n    end\r\n  end\r\n\r\n  p = [d, D, P0, ρ, g]\r\n\r\n  function h_column(x,p)\r\n    d_x = 0\r\n    if 0<= x< 0.2\r\n      d_x = p[2]\r\n    elseif 0.2<= x< 0.4\r\n      d_x = p[2]-(p[2]-p[1])/0.2*(x-0.2)\r\n    elseif 0.4<= x< 0.6\r\n      d_x = p[1]\r\n    elseif 0.6<= x< 0.8\r\n      d_x = p[1]+(p[2]-p[1])/0.2*(x-0.6)\r\n    elseif 0.8<= x<= 1.0\r\n      d_x = p[2]\r\n    end\r\n    V = Q/(π*d_x^2/4)\r\n    P = 1/2*p[4]*(Q/(π*p[2]^2/4))^2 + p[3] - (1/2*p[4]*V^2 + ΔP(x))\r\n    h = P/p[4]/p[5]\r\n  end\r\n\r\n  # 计算 h_column 函数的值\r\n  function calculate_values(p)\r\n    x_values = 0:0.01:1\r\n    return [h_column(x, p) for x in x_values]\r\n  end\r\n\r\n  # 绘制图像\r\n  x_values = 0:0.01:1\r\n  y_values = calculate_values(p)\r\n  figure = transposeMatrix(x_values, y_values)\r\n\r\n  return figure\r\nend","category":"page"},{"location":"assets/静态仿真/蒸汽动力循环仿真/代码/蒸汽动力循环部分代码/","page":"-","title":"-","text":"function reheat_rankine(冷凝器冷却压力,\n                        水泵供给压力,\n                        锅炉出口温度,\n                        再热器出口温度,\n                        汽轮机一级出口压力,\n\t\t\t\t\t\t工质)\n\n    冷凝器冷却压力 = 冷凝器冷却压力 isa Number ? 冷凝器冷却压力 : parse(Float64,冷凝器冷却压力)\n    水泵供给压力 = 水泵供给压力 isa Number ? 水泵供给压力 : parse(Float64,水泵供给压力)\n    锅炉出口温度 = 锅炉出口温度 isa Number ? 锅炉出口温度 : parse(Float64,锅炉出口温度)\n    再热器出口温度 = 再热器出口温度 isa Number ? 再热器出口温度 : parse(Float64,再热器出口温度)\n    汽轮机一级出口压力 = 汽轮机一级出口压力 isa Number ? 汽轮机一级出口压力 : parse(Float64,汽轮机一级出口压力)\n\n    #创建组件...\n    @named pump = Pump(P = 水泵供给压力,fluid = 工质)\n    @named boiler = Boiler(T = 锅炉出口温度,fluid = 工质)\n    @named turbine = Turbine(P = 汽轮机一级出口压力,fluid = 工质)\n    @named reboiler = Boiler(T = 再热器出口温度,fluid = 工质)\n    @named returbine = Turbine(P = 冷凝器冷却压力,fluid = 工质)\n    @named condenser = Condenser(fluid = 工质)\n\n    #构建连接关系\n    rc_eqs = [\n      connect(pump.out, boiler.in)\n      connect(boiler.out, turbine.in)\n      connect(turbine.out, reboiler.in)\n      connect(reboiler.out, returbine.in)\n      connect(returbine.out, condenser.in)\n      connect(condenser.out, pump.in)\n      D(x) ~ 0\n    ]\n    @named _rc_model = ODESystem(rc_eqs, t0) #连接关系也需要放到ODESystem中\n\n    # 组件与组件连接关系一起构建系统\n    @named rc_model = compose(_rc_model,[turbine, condenser , pump, boiler,reboiler,returbine ])\n\n    # 系统化简\n    sys = structural_simplify(rc_model)\n    equations(sys) # 查看方程\n    # 求解\n    prob = ODAEProblem(sys, [0], (0, 0.0))\n    sol = solve(prob)\n\n    #println(sol)\n    table = OrderedDict(\"汽轮机一级入口压力(pa)\" => sol[turbine.in.p][1],\n    \"汽轮机一级入口温度(k)\" => sol[turbine.in.t][1],\n    \"汽轮机一级出口温度(k)\" => sol[turbine.out.t][1],\n    \"汽轮机一级出口熵(J/(mol*k))\" => sol[turbine.out.s][1],\n    \"锅炉入口温度(k)\"=> sol[boiler.in.t][1],\n    \"锅炉出口压力(pa)\"=> sol[boiler.out.p][1],\n    \"锅炉入口压力(pa)\"=> sol[boiler.in.p][1])\n\n    plot_sys = [pump, boiler, turbine, reboiler, returbine, condenser];\n    propx = :s\n    propy = :t\n\n    ss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\n    tt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\n\n    xAxis = collect(range(ss[1], ss[2], 15))\n    yAxis = CoolProp.PropsSI.(\"T\", \"P\", sol[pump.out.p], \"S\", collect(range(ss[1], ss[2], 15)), 工质)\n\n    append!(xAxis, collect(range(ss[2], ss[3], 15)))\n    append!(yAxis,collect(range(tt[2], tt[3], 15)))\n\n    append!(xAxis,collect(range(ss[3], ss[4], 15)))\n    append!(yAxis,CoolProp.PropsSI.(\"T\", \"P\", sol[reboiler.out.p], \"S\", collect(range(ss[3], ss[4], 15)), 工质))\n\n    append!(xAxis,collect(range(ss[4], ss[5], 15)))\n    append!(yAxis,collect(range(tt[4], tt[5], 15)))\n\n    append!(xAxis,collect(range(ss[5], ss[6], 15)))\n    append!(yAxis,collect(range(tt[5], tt[6], 15)))\n\n    append!(xAxis,collect(range(ss[6], ss[1], 15)))\n    append!(yAxis,collect(range(tt[6], tt[1], 15)))\n    # println(xAxis)\n    # println(yAxis)\n    figure = transposeMatrix(xAxis, yAxis)\n    #在本地绘图\n    plot_local(figure)\n    return figure,table\nend","category":"page"},{"location":"assets/动态仿真/Ai4EJumulink/代码/jumulink相关代码/","page":"-","title":"-","text":"\"\"\"\n控制系统方框图,由要素组成和它们的邻接矩阵构成.\\n\n使用有向图来储存拓扑关系.\\n\n值得注意的是:以列表示起始,以行表示终止,1代表连接,0代表没连接,-1代表和点的负输入\n\"\"\"\nstruct SystemMap\n  links::Vector{<:AbstractLink}\n  adjacency_matrix::Matrix{Int8}\nend\n\n\"\"\"\n方框图前向通道\n\"\"\"\nstruct ForwardChannel <: AbstractPath\n  value::Int128\n  order::Int64\n  links::Vector{Int16}\n  tf::Union{Nothing,Tfs,Fraction}\nend\n\n\"\"\"\n环路\\n\n易知:方框图中,环路总是可以看作从一个和点出发,然后回到该和点,当然一个和点产生的可能不止一个回路\n\"\"\"\nmutable struct ClosedLoop <: AbstractPath\n  value::Int128\n  order::Int64\n  links::Vector{Int16}\n  tf::Union{Fraction,Tfs,Nothing}\nend\n\n\"\"\"\n利用回溯进行寻路\n\"\"\"\nfunction path_finding(matrix::Matrix, start, stop)\n  # start与stop间全部的路径\n  paths = []\n  # 单条路径的节点栈\n  path = Int16[start]\n  # 前进节点\n  step = start\n  # 所有可能路径节点栈\n  tree = []\n  while true\n    # 当前节点的子节点\n    sons = []\n    for i in eachindex(matrix[step, :])\n      if matrix[step, i] != 0\n        if i in path && i != start\n          continue\n        end\n        append!(sons, i)\n      end\n    end\n    if isempty(sons)\n      if path[end] == stop\n        push!(paths, copy(path))\n        pop!(path)\n        pop!(tree[end])\n        while isempty(tree[end])\n          pop!(tree)\n          pop!(path)\n          isempty(tree) && break\n          pop!(tree[end])\n        end\n        isempty(tree) && break\n        step = tree[end][end]\n        append!(path, step)\n      end\n      pop!(tree[end])\n      pop!(path)\n      while isempty(tree[end])\n        pop!(tree)\n        isempty(tree) && break\n        pop!(tree[end])\n        pop!(path)\n        isempty(path) && break\n      end\n      isempty(tree) && break\n    else\n      push!(tree, sons)\n    end\n    step = tree[end][end]\n    append!(path, step)\n    if path[end] == stop\n      push!(paths, copy(path))\n      pop!(path)\n      pop!(tree[end])\n      while isempty(tree[end])\n        pop!(tree)\n        pop!(path)\n        isempty(tree) && break\n        pop!(tree[end])\n      end\n      isempty(tree) && break\n      step = tree[end][end]\n      append!(path, step)\n    end\n  end\n  return paths\nend\npath_finding(matrix, point) = path_finding(matrix, point, point)\n\n\"\"\"\n将各元素按数组顺序记为二进制数\n\"\"\"\nfunction change(v::Vector)::Int128\n  v = sort(v)\n  value::Int128 = 0\n  for i in v\n    value += 1 << (i - 1)\n  end\n  return value\nend","category":"page"},{"location":"#综合能源系统仿真优化平台","page":"主页","title":"综合能源系统仿真优化平台","text":"","category":"section"},{"location":"#简介","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"综合能源系统仿真优化平台基于新一代开源科学计算编程语言Julia与Vue3前端框架，适用于静态仿真求解能动等专业典型问题，动态仿真求解复杂工业流程系统问题，优化求解复杂综合能源系统配置寻优问题的仿真优化平台。该平台结合能源、计算机等专业特色，充分利用学科交叉以及先进的综合能源系统建模、仿真、优化与控制思想，不断探索与提升编写工业软件的实践能力，助力“碳达峰、碳中和”双碳目标。","category":"page"},{"location":"#整体效果","page":"主页","title":"整体效果","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#平台技术架构","page":"主页","title":"平台技术架构","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"模块 链接 内容\n前端 VUE3 渐进式JavaScript 框架\n前端 Soybean-admin 基于NaiveUI的中后台模版\n后端 OptControl.jl 最优控制拓展包\n后端 Ai4EComponentLib.jl 组件库\n后端 Ai4EMetaPSE.jl 解析器\n后端 ModelingToolkit.jl 组件建模工具包\n后端 DifferentialEquations.jl 微分方程求解引擎\n文档 Ai4EDocs 教程文档、设计文档\n组织 Ai4Energy 开源组织主页","category":"page"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#平台三大功能","page":"主页","title":"平台三大功能","text":"","category":"section"},{"location":"#.静态仿真","page":"主页","title":"1.静态仿真","text":"","category":"section"},{"location":"#平台导航栏","page":"主页","title":"平台导航栏","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#简介-2","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"该板块共包括四个场景的仿真，即从热力学、流体力学、传热学、自动控制原理中分别选取了一个经典模型进行仿真求解——蒸汽动力循环仿真、文丘里管压力分布、顺流与逆流式换热器温度分布仿真、基于无自平衡能力系统的PID控制仿真。","category":"page"},{"location":"","page":"主页","title":"主页","text":"蒸汽动力循环仿真支持三个循环（包括朗肯循环、再热循环以及制冷循环）模式的仿真。通过用户输入的参数（如冷凝器冷却压力、锅炉出口温度等），计算出整个循环过程中温度、压力、焓、熵等参数。同时，该部分使用单独描述系统中每个组件并连接在一起的组件化建模方法，极大地提高了建模的效率。用户可以据此比较不同循环参数和组件配置对性能的影响，优化循环设计，并找到达到最佳性能的操作条件。","category":"page"},{"location":"","page":"主页","title":"主页","text":"文丘里管压力分布仿真利用了伯努利原理对不同参数（如流量、有无摩擦、介质种类等参数）下文丘里管压力分布进行仿真模拟。通过用户输入的不同参数，可以模拟在该参数约束下文丘里管的状态，从而使用户更直观地了解其压力分布情况。","category":"page"},{"location":"","page":"主页","title":"主页","text":"换热器温度分布仿真模拟了一个套管式换热器的换热情况，在操作界面可以调整换热器的长度，介质种类，顺逆流，冷、热流入口温度、流量，通过计算会获得换热器不同部位的温度值，整体换热速率等信息，更直观的了解到换热器的换热情况。此仿真过程将换热原理与ODE结合，使模型更精准。","category":"page"},{"location":"","page":"主页","title":"主页","text":"PID控制仿真通过调节和优化参数，对不同参数组合的仿真结果进行比较，评估PID（比例-积分-微分）控制器在系统中的性能表现，包括稳态误差、响应时间、抗干扰能力等指标，以找到最佳的PID控制器参数，实现更好的控制效果，提高系统的控制精度和稳定性。","category":"page"},{"location":"","page":"主页","title":"主页","text":"静态仿真板尝试了不同领域知识与软件仿真技术的结合，为后续的动态仿真、综合能源系统仿真优化打下坚实基础。","category":"page"},{"location":"#文档索引","page":"主页","title":"文档索引","text":"","category":"section"},{"location":"#[蒸汽动力循环仿真](Static_simulation/蒸汽动力循环仿真.md)","page":"主页","title":"蒸汽动力循环仿真","text":"","category":"section"},{"location":"#[顺流与逆流式换热器仿真](Static_simulation/顺流与逆流式换热器仿真.md)","page":"主页","title":"顺流与逆流式换热器仿真","text":"","category":"section"},{"location":"#[文丘里管压力仿真](Static_simulation/文丘里管压力仿真.md)","page":"主页","title":"文丘里管压力仿真","text":"","category":"section"},{"location":"#[PID控制仿真实验](Static_simulation/PID控制仿真实验.md)","page":"主页","title":"PID控制仿真实验","text":"","category":"section"},{"location":"#.动态仿真","page":"主页","title":"2.动态仿真","text":"","category":"section"},{"location":"#平台导航栏-2","page":"主页","title":"平台导航栏","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#文档索引-2","page":"主页","title":"文档索引","text":"","category":"section"},{"location":"#[Ai4EJumulink](Dynamic_simulation/Ai4EJumulink.md)","page":"主页","title":"Ai4EJumulink","text":"","category":"section"},{"location":"#[Ai4ESimulator](Dynamic_simulation/Ai4ESimulator.md)","page":"主页","title":"Ai4ESimulator","text":"","category":"section"},{"location":"#简介-3","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"高可拓展的云架构流程系统仿真平台基于新一代开源科学计算编程语言Julia与Vue3前端框架，适用于复杂流程系统的云仿真平台。云仿真平台采用前后端分离技术。前端为Web界面，后端为集解析器、组件库、求解器三大模块为一体的仿引擎。各模块间通过接口协同工作。仿真平台具备高度可拓展性，后端参析器可嵌入参数辨识问题、优化问题、控制问题等多种问题的代码生成工具;组件库广泛适用于能源、化工、机器、电气等多个领域的流程系统模型。","category":"page"},{"location":"#.优化","page":"主页","title":"3.优化","text":"","category":"section"},{"location":"#平台导航栏-3","page":"主页","title":"平台导航栏","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#文档索引-3","page":"主页","title":"文档索引","text":"","category":"section"},{"location":"#[风光煤气储发电](Optimization/风光煤气储发电.md)","page":"主页","title":"风光煤气储发电","text":"","category":"section"},{"location":"#[风光制氢](Optimization/风光制氢.md)","page":"主页","title":"风光制氢","text":"","category":"section"},{"location":"#简介-4","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"优化板块实现了对风光制氢、风光煤气储发电等不同约束场景的构建、储氢和储能的技术经济性比对、设备容量优化、方案经济性评价、综合落地制氢价格反推等功能要求。其允许用户根据特定的约束条件，如能源供应、负载需求、储氢容量等，构建风光制氢系统的约束场景。用户可以输入风能和太阳能资源数据，设定能源需求和运营约束等参数，以便进行后续分析和优化。平台能够根据用户提供的数据，对不同的储氢和储能技术进行经济性比对。可以计算和分析不同技术方案的成本、效率、能量损失等关键指标，帮助用户确定最具经济性的方案。其具备的设备容量优化功能，可以根据用户设定的约束和目标，通过算法和模拟计算，推导出最佳的设备容量配置。确保风光制氢系统在满足需求的同时，最大程度地减少成本或资源消耗。","category":"page"},{"location":"#欢迎加入","page":"主页","title":"欢迎加入","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"指导老师：李明涛（mingtao@mail.xjtu.edu.cn）","category":"page"},{"location":"","page":"主页","title":"主页","text":"鸣谢：","category":"page"},{"location":"","page":"主页","title":"主页","text":"年份 贡献者\n2023——第34届腾飞杯 (Image: )\n2024——第35届腾飞杯 (Image: )\n2025——第36届腾飞杯 期待你的加入！\n2026...... ......","category":"page"}]
}
